#!/bin/bash
#
# dolly-project.org
#

set -e

# Print usage information
usage() {
  echo 'Usage:	dolly -m|--mode save -t|--list "192.168.0.1" "dirname"
        dolly -m|--mode restore -t|--list "192.168.0.1 192.168.0.2..." "dirname"'
}

ARGS_MIN=5
ARGS_MAX=5
E_SHELL=64
E_OPTERR=65
E_PATHERR=66
E_MODE=67
E_GETOPT=68
E_LIST=69
E_IFACE=70

# Check current shell
if [ "${SHELL}" != "/bin/bash"  ]
then
  echo "Error: only BASH shell supported"
  echo
  exit $E_SHELL
fi

# Check how many arguments provided from daemon
if [ $# -lt $ARGS_MIN ]
then
  usage
  exit $E_OPTERR
fi
if [ $# -gt $ARGS_MAX ]
then
  usage
  exit $E_OPTERR
fi

# For details see: /usr/share/doc/util-linux/examples/getopt-parse.bash
ARGS=`getopt --name 'dolly' --options hm:t: --longoptions help,mode:,list: -- "$@"`
eval set -- "$ARGS"
while true
do
  case "$1" in
    -h|--help)		usage;			exit 0;;
    -m|--mode)		MODE=$2;		shift 2;;
    -t|--list)		LIST=$2;		shift 2;;
    --)			shift;			break;;
    *)			echo "Getopt error!";	exit $E_GETOPT;;
  esac
done

# Check which mode is used
shopt -s nocasematch
if [ "$MODE" == "save" ]
then
  MODE=save
elif [ "$MODE" == "restore" ]
then
  MODE=restore
else
  echo "Error: wrong mode is selected"
  exit $E_MODE
fi
shopt -u nocasematch


############################### RESTORING #####################################
if [ "$MODE" == "restore" ]
then

# Check if path provided and exist
IMAGEPATH="/home/cloned/$1"
if [ ! -d "$IMAGEPATH" ]
then
  echo "Error: image path does not exist"
  exit $E_PATHERR
fi

# TODO
# Check if current user can change directory to $IMAGEPATH
# Check if image files are readable
# Check for duplicates in lists of hosts
# Check if host list contains hostnames and convert them to IP addresses

# Number of hosts to clone
NUM_LIST=`echo $LIST | wc -w`

# TODO fix subnet detection (use CIDR logic - sipcalc?)
SUBNET=`echo ${LIST} | awk 'BEGIN { FS = "." } ; { print $1 "." $2 "." $3 "." }'`
SUBNETS=`for IP in ${LIST}
do
  echo $IP | awk 'BEGIN { FS = "." } ; { print $1 "." $2 "." $3 "." }'
done | sort | uniq | wc -l
`
# Target IP addresses must be in the same subnet
if [ "${SUBNETS}" -ne "1" ]
then
  echo "Error: target IP addresses in different subnets"
  exit $E_LIST
fi

# Look for needed interface for target subnet
IFACE=`ip -4 -oneline addr show | grep -F "${SUBNET}" | awk '{ print $2 }'`
if [ -z "$IFACE" ]
then
  echo "Error: interface not found for target subnet"
  exit $E_IFACE
fi

echo "Cloning started at: `date`"

# Set ethernet card speed and duplex
# Reset Wake on Magic packet flag
for CLONE in ${LIST}
do
  ssh root@${CLONE} "ethtool -s eth0 wol d"
  ssh root@${CLONE} "ethtool -s eth0 speed 100 duplex full"
  ssh root@${CLONE} "ethtool -s eth0 wol g"
  sleep 1
done

# Copy Dolly script to target (also check if we can receive files over multicast)
for CLONE in ${LIST}
do
  # Execute Dolly script
  ssh root@${CLONE} "/usr/bin/screen -d -m /usr/bin/udp-receiver --ttl=1 --nokbd --file /sbin/dolly-receiver --stat-period 2000"
  sleep 1
done
# Wait for udpcast to settle
sleep 5

# Run sender with speed limit and frequent statistics output
/usr/bin/udp-sender --ttl=1 --file "/usr/local/bin/dolly-receiver" --interface ${IFACE} --full-duplex --min-receivers ${NUM_LIST} --nokbd --max-bitrate 80m --stat-period 2000
sleep 5

# Cloning partition table
# TODO Use ssh root@${CLONE} /sbin/blockdev --rereadpt $DEV
#  to reread partition table
if [ -e "${IMAGEPATH}/sda-pt.sf" ]
then
  for CLONE in ${LIST}
  do
    cat ${IMAGEPATH}/sda-pt.sf | ssh root@${CLONE} "/sbin/sfdisk -uS --Linux --force --quiet /dev/sda"
  done
fi

# Cloning partitions
cd ${IMAGEPATH}
for PART in `ls sda*.img.gz | awk 'BEGIN { FS = "." } ; { print $1 }'`
do
  for CLONE in ${LIST}
  do
    # Execute Dolly script
    ssh root@${CLONE} "/usr/bin/screen -d -m /bin/bash /sbin/dolly-receiver /dev/${PART}"
    sleep 1
    # TODO resize NTFS?
    #add "ntfsresize --force --no-progress-bar $1" to cloned-restore?
  done
  # Wait for udpcast to settle
  sleep 5
  # Run sender with speed limit and frequent statistics output
  /usr/bin/udp-sender --ttl=1 --file "${IMAGEPATH}/${PART}.img.gz" --interface ${IFACE} --full-duplex --min-receivers ${NUM_LIST} --nokbd --max-bitrate 80m --stat-period 2000
  # Wait for data is received by slow targets
  # This fixes "gzip: stdin error unexpected end of file"
  # Sometimes client disconnects after finishing 1st partition. Slow clients?
  sleep 30
done

# Copy MBR boot record
if [ -e "${IMAGEPATH}/sda-mbr.bin" ]
then
  for CLONE in ${LIST}
  do
    cat ${IMAGEPATH}/sda-mbr.bin | ssh root@${CLONE} "/bin/dd of=/dev/sda"
  done
fi

# Copy over hidden data between 1 and 63 sectors that containing GRUB stage 1.5
# TODO automatically get hidden sectors location from partition table
if [ -e "${IMAGEPATH}/sda-hiddensectors.bin" ]
then
  for CLONE in ${LIST}
  do
    cat ${IMAGEPATH}/sda-hiddensectors.bin | ssh root@${CLONE} "/bin/dd bs=512 count=62 seek=1 of=/dev/sda"
  done
fi

# Deliver optional files to target partiton via multicast.
# Files must resides in subdirectories named after partition (like sda1, sda2,..).
# Only regular files supported, file would be placed into root directory of partition.
cd ${IMAGEPATH}
for PART in sda{1,2,3,4}
do
  if [ -d ${PART} ]
  then
    pushd ${PART}
    for CLONE in ${LIST}
    do
      ssh root@${CLONE} "mkdir -p /mnt/${PART}"
      ssh root@${CLONE} "mount /dev/${PART} /mnt/${PART}"
      sleep 1
    done
    for FILE in `dir -d *`
    do
      for CLONE in ${LIST}
      do
        ssh root@${CLONE} "/usr/bin/screen -d -m /usr/bin/udp-receiver --ttl=1 --nokbd --file /mnt/${PART}/${FILE}"
        sleep 1
      done
      sleep 5
      /usr/bin/udp-sender --ttl=1 --file "${IMAGEPATH}/${PART}/${FILE}" --interface ${IFACE} --full-duplex --min-receivers ${NUM_LIST} --nokbd --max-bitrate 80m --stat-period 2000
      sleep 30
    done
    for CLONE in ${LIST}
    do
      ssh root@${CLONE} umount /mnt/${PART}
      sleep 1
    done
    popd
  fi
done

# Run script on server side and use target hostname as argument
if [ -e "$IMAGEPATH/custom_local_script" ]
then
  for CLONE in ${LIST}
  do
    ${IMAGEPATH}/custom_local_script ${CLONE}
  done
fi

# Run script remotely on every target simultaneously
if [ -e "$IMAGEPATH/custom_remote_script" ]
then
  mussh -m 0 -q -L root -h ${LIST} -C "$IMAGEPATH/custom_remote_script"
fi

# Reboot targets
for CLONE in ${LIST}
do
  ssh root@${CLONE} reboot
done

echo "Cloning finished at: `date`"
fi
############################### END OF RESTORING #####################################

################################## SAVING #####################################
if [ "$MODE" == "save" ]
then

# Check if single address provided
HOSTCOUNT=`echo $LIST | wc -w`
if [ "${HOSTCOUNT}" -ne "1" ]
then
  echo "Error: multiple targets not allowed in save mode"
  exit $E_LIST
fi

CLONE=$LIST

# TODO fix subnet detection (use CIDR logic - sipcalc?)
SUBNET=`echo ${LIST} | awk 'BEGIN { FS = "." } ; { print $1 "." $2 "." $3 "." }'`

# Look for needed interface for target subnet
IFACE=`ip -4 -oneline addr show | grep -F "${SUBNET}" | awk '{ print $2 }'`
if [ -z "$IFACE" ]
then
  echo "Error: interface not found for target subnet"
  exit $E_IFACE
fi

echo "Imaging started at: `date`"

# Find a name of the first disk device
SRCDEV=$(ssh root@${CLONE} lsblk -d -e 11,7 -i -n -o NAME | head -n 1)

# Creating directory for new image
IMAGEPATH="/home/cloned/$1"
mkdir "${IMAGEPATH}" || exit $E_PATHERR
cd "${IMAGEPATH}"

# Dumping partition table
ssh root@${CLONE} "/sbin/sfdisk -d /dev/${SRCDEV}" > sda-pt.sf

# Dumping MBR boot code
ssh root@${CLONE} "/bin/dd if=/dev/${SRCDEV} bs=448 count=1" > sda-mbr.bin

# Dumping hidden sectors
# TODO automatically get hidden sectors location from partition table
ssh root@${CLONE} "/bin/dd if=/dev/${SRCDEV} bs=512 count=62 skip=1" > sda-hiddensectors.bin

# Copy Dolly script to target
scp -q "/usr/local/bin/dolly-sender" root@${CLONE}:/sbin/

# TODO: if image have more than one net interface?
NUM=0
for PART in `ssh root@${CLONE} "ls /dev/${SRCDEV}?*" | awk 'BEGIN { FS = "/" } ; { print $3 }'`
do
  NUM=$((NUM+1))
  echo "Saving partition ${PART}"
  # Run sender and put process in background
  ssh root@${CLONE} "/usr/bin/screen -d -m /sbin/dolly-sender /dev/${PART}"
  # Wait for udpcast to settle
  sleep 5
  # Use udpcast to receive data
  # Save to sda1.img.gz, sda2.img.gz and so on
  /usr/bin/udp-receiver --ttl=1 --interface ${IFACE} --nokbd --stat-period 2000 --file "${IMAGEPATH}/sda${NUM}.img.gz"
done

ssh root@${CLONE} poweroff

echo "Imaging finished at: `date`"
fi
################################## ENF OF SAVING #####################################

exit 0
